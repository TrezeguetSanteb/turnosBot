#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para Railway - Verificar variables de WhatsApp
y el flujo completo de notificaciones directas
"""

import os
import sys
from datetime import datetime

# Setup path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def mostrar_variables_whatsapp():
    """Mostrar todas las variables relacionadas con WhatsApp"""
    print("üîë VARIABLES DE ENTORNO WHATSAPP")
    print("=" * 40)
    
    # Todas las posibles variables de WhatsApp
    vars_whatsapp = [
        'WHATSAPP_TOKEN',
        'WHATSAPP_PHONE_ID', 
        'WHATSAPP_ACCESS_TOKEN',
        'WHATSAPP_PHONE_NUMBER_ID',
        'META_API_VERSION',
        'META_ACCESS_TOKEN',
        'META_PHONE_NUMBER_ID'
    ]
    
    print("üìã Variables encontradas:")
    found = 0
    for var in vars_whatsapp:
        value = os.getenv(var)
        if value:
            # Mostrar solo parte del valor por seguridad
            if len(value) > 8:
                display = f"{value[:4]}...{value[-4:]}"
            else:
                display = "***"
            print(f"   ‚úÖ {var} = {display}")
            found += 1
        else:
            print(f"   ‚ùå {var} = NO CONFIGURADA")
    
    print(f"\nüìä Total configuradas: {found}/{len(vars_whatsapp)}")
    
    return found > 0

def verificar_config_object():
    """Verificar el objeto config y sus m√©todos"""
    print("\nüîß OBJETO CONFIG")
    print("=" * 40)
    
    try:
        from core.config import config
        
        print("üìã M√©todos del config:")
        
        # Verificar has_whatsapp
        has_whatsapp = config.has_whatsapp()
        print(f"   config.has_whatsapp(): {has_whatsapp}")
        
        # Verificar atributos espec√≠ficos
        attrs = ['WHATSAPP_TOKEN', 'WHATSAPP_PHONE_ID', 'WHATSAPP_ACCESS_TOKEN', 'WHATSAPP_PHONE_NUMBER_ID']
        for attr in attrs:
            try:
                value = getattr(config, attr, None)
                if value:
                    display = f"{value[:4]}...{value[-4:]}" if len(value) > 8 else "***"
                    print(f"   config.{attr}: {display}")
                else:
                    print(f"   config.{attr}: None")
            except:
                print(f"   config.{attr}: ERROR")
        
        return has_whatsapp
        
    except Exception as e:
        print(f"‚ùå Error con config: {e}")
        return False

def test_whatsapp_sender_detallado():
    """Test detallado del WhatsAppSender con m√°s informaci√≥n"""
    print("\nüì± WHATSAPP SENDER DETALLADO")
    print("=" * 40)
    
    try:
        # Intentar importar
        print("1. Importando WhatsAppSender...")
        from bots.senders.whatsapp_sender import WhatsAppSender
        print("   ‚úÖ Import exitoso")
        
        # Intentar crear instancia con manejo de errores detallado
        print("2. Creando instancia...")
        try:
            sender = WhatsAppSender()
            print("   ‚úÖ Instancia creada exitosamente")
            
            # Test de configuraci√≥n
            print("3. Testing configuraci√≥n interna...")
            # Verificar atributos internos si existen
            if hasattr(sender, 'access_token'):
                token_ok = sender.access_token is not None
                print(f"   access_token: {'‚úÖ' if token_ok else '‚ùå'}")
            
            if hasattr(sender, 'phone_number_id'):
                phone_ok = sender.phone_number_id is not None
                print(f"   phone_number_id: {'‚úÖ' if phone_ok else '‚ùå'}")
            
            return sender
            
        except ValueError as ve:
            print(f"   ‚ùå Error de configuraci√≥n: {ve}")
            return None
        except Exception as e:
            print(f"   ‚ùå Error inesperado: {e}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error importando: {e}")
        return None

def test_endpoint_cancelacion_simulado():
    """Simular exactamente lo que hace el endpoint de cancelaci√≥n"""
    print("\nüé≠ SIMULACI√ìN EXACTA DEL ENDPOINT")
    print("=" * 40)
    
    try:
        print("1. Importando funciones del endpoint...")
        from core.database import obtener_todos_los_turnos, eliminar_turno_admin
        from admin.notifications import notificar_admin_cancelacion_directa
        print("   ‚úÖ Imports exitosos")
        
        print("2. Simulando datos del turno...")
        # Simular un turno (ID, nombre, fecha, hora, telefono)
        turno_simulado = (9999, "Usuario Test", "2024-12-31", "15:00", "5491123456789")
        turno_id, nombre, fecha, hora, telefono = turno_simulado
        
        print(f"   Turno ID: {turno_id}")
        print(f"   Nombre: {nombre}")
        print(f"   Fecha: {fecha}")
        print(f"   Hora: {hora}")
        print(f"   Tel√©fono: {telefono}")
        
        print("3. Ejecutando notificar_admin_cancelacion_directa...")
        exito_envio = notificar_admin_cancelacion_directa(nombre, fecha, hora, telefono)
        
        if exito_envio:
            print("   ‚úÖ Funci√≥n ejecutada exitosamente")
            print("   üéØ El usuario deber√≠a haber recibido WhatsApp")
        else:
            print("   ‚ö†Ô∏è Funci√≥n ejecutada con errores")
            print("   üìù Admin notificado pero fall√≥ WhatsApp al usuario")
        
        return exito_envio
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def generar_solucion():
    """Generar pasos espec√≠ficos para solucionar el problema"""
    print("\nüîß SOLUCI√ìN PARA RAILWAY")
    print("=" * 40)
    
    print("üìã PASOS PARA RESOLVER:")
    print()
    print("1. üîë VERIFICAR VARIABLES EN RAILWAY:")
    print("   Ve a Railway ‚Üí Tu proyecto ‚Üí Variables")
    print("   Aseg√∫rate que est√©n configuradas:")
    print("   ‚Ä¢ WHATSAPP_TOKEN (o WHATSAPP_ACCESS_TOKEN)")
    print("   ‚Ä¢ WHATSAPP_PHONE_ID (o WHATSAPP_PHONE_NUMBER_ID)")
    print("   ‚Ä¢ META_API_VERSION")
    print()
    print("2. üì± FORMATO CORRECTO:")
    print("   ‚Ä¢ WHATSAPP_TOKEN: EAAxxxxxxxxxx (del panel de Facebook)")
    print("   ‚Ä¢ WHATSAPP_PHONE_ID: 123456789 (ID num√©rico)")
    print("   ‚Ä¢ META_API_VERSION: v17.0")
    print()
    print("3. üß™ TESTING EN RAILWAY:")
    print("   Ejecutar este script en Railway para verificar:")
    print("   python diagnostico_panel_mobile.py")
    print()
    print("4. üìû TESTING CON N√öMERO REAL:")
    print("   Cambiar en el c√≥digo:")
    print("   telefono = \"5491123456789\"  # Por tu n√∫mero real")
    print()
    print("5. üîç REVISAR LOGS DE RAILWAY:")
    print("   Cuando canceles un turno, buscar en logs:")
    print("   ‚Ä¢ \"üì± Enviando notificaci√≥n directa\"")
    print("   ‚Ä¢ \"‚úÖ Notificaci√≥n enviada exitosamente\"")
    print("   ‚Ä¢ \"‚ùå Error en env√≠o directo WhatsApp\"")

def main():
    """Ejecutar diagn√≥stico completo espec√≠fico para Railway"""
    print("üöÄ DIAGN√ìSTICO RAILWAY - NOTIFICACIONES DIRECTAS")
    print("=" * 60)
    print("Diagn√≥stico espec√≠fico para resolver el problema de")
    print("notificaciones directas por WhatsApp en Railway")
    print("=" * 60)
    
    # Ejecutar diagn√≥sticos
    has_vars = mostrar_variables_whatsapp()
    has_config = verificar_config_object()
    sender = test_whatsapp_sender_detallado()
    endpoint_ok = test_endpoint_cancelacion_simulado()
    
    # Resumen y soluci√≥n
    print(f"\n{'='*20} RESUMEN {'='*20}")
    print(f"Variables encontradas: {'‚úÖ' if has_vars else '‚ùå'}")
    print(f"Config funcionando: {'‚úÖ' if has_config else '‚ùå'}")
    print(f"WhatsApp Sender: {'‚úÖ' if sender else '‚ùå'}")
    print(f"Endpoint simulado: {'‚úÖ' if endpoint_ok else '‚ùå'}")
    
    if not has_vars:
        print("\nüéØ PROBLEMA PRINCIPAL: VARIABLES DE ENTORNO")
        print("Las variables de WhatsApp no est√°n configuradas en Railway")
    elif not sender:
        print("\nüéØ PROBLEMA PRINCIPAL: CONFIGURACI√ìN WHATSAPP")
        print("Las variables existen pero WhatsAppSender no se inicializa")
    elif not endpoint_ok:
        print("\nüéØ PROBLEMA PRINCIPAL: FLUJO DE NOTIFICACIONES")
        print("WhatsApp funciona pero el flujo del endpoint falla")
    else:
        print("\nüéâ TODO DEBER√çA FUNCIONAR")
        print("Si a√∫n no llegan las notificaciones, revisar logs de Railway")
    
    generar_solucion()

if __name__ == "__main__":
    main()
