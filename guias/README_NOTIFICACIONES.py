#!/usr/bin/env python3
"""
GU√çA COMPLETA DEL SISTEMA DE NOTIFICACIONES AUTOM√ÅTICAS
========================================================

Este sistema permite enviar notificaciones autom√°ticas cuando se cancelan turnos
o se bloquean d√≠as desde el panel administrativo.

ARCHIVOS PRINCIPALES:
---------------------

1. notifications.py - M√≥dulo principal de notificaciones
2. bot_telegram.py - Bot de Telegram (ejecutar con: python bot_telegram.py)
3. telegram_sender.py - Script para env√≠o directo por Telegram
4. daemon_notificaciones.py - Daemon que ejecuta telegram_sender.py autom√°ticamente
5. control_notificaciones.sh - Script de control del daemon
6. crear_notificacion_telegram.py - Crear notificaciones de prueba

FUNCIONAMIENTO DEL SISTEMA:
---------------------------

1. Cuando se cancela un turno o se bloquea un d√≠a desde el panel admin,
   se crea autom√°ticamente una notificaci√≥n en notifications_log.json

2. Las notificaciones se env√≠an de tres formas:
   a) Autom√°ticamente cuando el usuario contacta cualquier bot (verificaci√≥n en bot_core.py)
   b) Daemon autom√°tico que ejecuta telegram_sender.py cada 60 segundos
   c) Manualmente ejecutando los scripts de env√≠o

3. Despu√©s de enviar notificaciones por Telegram, se eliminan autom√°ticamente
   del log para evitar duplicados.

COMANDOS PRINCIPALES:
--------------------

# Control del daemon (RECOMENDADO PARA PRODUCCI√ìN)
./control_notificaciones.sh start    # Iniciar daemon autom√°tico
./control_notificaciones.sh stop     # Detener daemon
./control_notificaciones.sh status   # Ver estado del daemon
./control_notificaciones.sh logs     # Ver logs en tiempo real
./control_notificaciones.sh test     # Ejecutar env√≠o una vez

# Comandos manuales
python telegram_sender.py            # Enviar notificaciones pendientes una vez
python bot_telegram.py               # Iniciar bot de Telegram
python crear_notificacion_telegram.py # Crear notificaci√≥n de prueba

CONFIGURACI√ìN PARA PRODUCCI√ìN:
------------------------------

1. Iniciar el daemon de notificaciones autom√°ticas:
   ./control_notificaciones.sh start

2. Mantener el bot de Telegram corriendo (opcional, para respuestas interactivas):
   python bot_telegram.py &

3. Verificar que todo funciona:
   ./control_notificaciones.sh status

El daemon se encarga autom√°ticamente de:
- Enviar notificaciones por Telegram cada 60 segundos
- Limpiar notificaciones ya enviadas
- Registrar logs de actividad
- Reintentar en caso de errores

VENTAJAS DEL NUEVO SISTEMA:
--------------------------

‚úÖ Env√≠o autom√°tico independiente del bot
‚úÖ Limpieza autom√°tica de notificaciones enviadas
‚úÖ No duplica notificaciones
‚úÖ Funciona sin importar en qu√© plataforma se cre√≥ el turno
‚úÖ Logs detallados para debugging
‚úÖ Control f√°cil con scripts
‚úÖ Reinicio autom√°tico en caso de errores

RESOLUCI√ìN DE PROBLEMAS:
------------------------

‚ùå "Chat not found" en Telegram:
   - El usuario debe haber iniciado una conversaci√≥n con el bot primero
   - Verifica que el ID de Telegram sea correcto (solo n√∫meros)

‚ùå El daemon no est√° funcionando:
   - ./control_notificaciones.sh status
   - ./control_notificaciones.sh logs
   - Verificar que telegram_sender.py funciona: ./control_notificaciones.sh test

‚ùå Notificaciones no se env√≠an:
   - Verificar notificaciones pendientes: python -c "from notifications import obtener_notificaciones_pendientes; print(len(obtener_notificaciones_pendientes()))"
   - Ejecutar manualmente: python telegram_sender.py

‚ùå Notificaciones duplicadas:
   - El sistema limpia autom√°ticamente las enviadas
   - Si persiste, revisar notifications_log.json

ARCHIVOS DE LOG Y CONFIGURACI√ìN:
--------------------------------

- notifications_log.json - Notificaciones pendientes y enviadas
- daemon_notificaciones.log - Log del daemon autom√°tico  
- daemon_notificaciones.pid - PID del daemon en ejecuci√≥n

INTEGRACI√ìN CON OTROS CANALES:
------------------------------

- WhatsApp: Las notificaciones se muestran cuando el usuario contacta el bot
- Otros canales: Modifica telegram_sender.py para agregar m√°s m√©todos de env√≠o

CONFIGURACI√ìN AVANZADA:
-----------------------

Para cambiar el intervalo del daemon, edita daemon_notificaciones.py:
INTERVALO_SEGUNDOS = 60  # Cambiar a los segundos deseados

Para configurar m√∫ltiples tokens de Telegram o otros canales,
modifica telegram_sender.py seg√∫n tus necesidades.

¬°El sistema est√° completamente funcional y listo para producci√≥n! üöÄ
"""

if __name__ == '__main__':
    print(__doc__)
