#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para el problema de cancelaci√≥n desde panel admin
Ya sabemos que WhatsApp funciona (bot conversacional OK), pero el env√≠o directo falla
"""

import os
import sys
from datetime import datetime

# Setup path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_whatsapp_directo_simple():
    """Test directo usando WhatsAppSender igual que hace el panel"""
    print("üîç TEST 1: WHATSAPP SENDER DIRECTO")
    print("=" * 40)
    
    try:
        from bots.senders.whatsapp_sender import WhatsAppSender
        
        # Crear sender exactamente como lo hace el panel
        sender = WhatsAppSender()
        
        # Mensaje de prueba igual al del panel
        mensaje = """‚ùå *Turno Cancelado*

Hola Test Usuario,

Tu turno ha sido cancelado por el administrador:

üìÖ **Fecha:** 2024-12-30
‚è∞ **Hora:** 15:00

Si necesitas reprogramar tu turno, por favor contactanos.

Disculpa las molestias."""
        
        # N√∫mero de prueba
        telefono = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR TU N√öMERO
        
        print(f"üì± Enviando a: {telefono}")
        print(f"üí¨ Mensaje: {mensaje[:50]}...")
        
        # Limpiar n√∫mero igual que el panel
        telefono_limpio = sender.clean_phone_number(telefono)
        print(f"üßπ N√∫mero limpio: {telefono_limpio}")
        
        # Enviar mensaje
        resultado = sender.send_message(telefono_limpio, mensaje)
        
        if resultado:
            print("‚úÖ ENV√çO DIRECTO EXITOSO")
            print("   El problema NO es WhatsAppSender")
        else:
            print("‚ùå ENV√çO DIRECTO FALL√ì")
            print("   El problema ES WhatsAppSender")
            
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_funcion_panel():
    """Test de la funci√≥n exacta que usa el panel"""
    print("\nüîç TEST 2: FUNCI√ìN DEL PANEL")
    print("=" * 40)
    
    try:
        from admin.notifications import enviar_whatsapp_directo_cancelacion
        
        # Datos de prueba
        nombre = "Test Panel"
        fecha = "2024-12-30"
        hora = "15:30"
        telefono = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR TU N√öMERO
        
        print(f"üìù Datos:")
        print(f"   Nombre: {nombre}")
        print(f"   Fecha: {fecha}")
        print(f"   Hora: {hora}")
        print(f"   Tel√©fono: {telefono}")
        
        # Ejecutar funci√≥n exacta del panel
        resultado = enviar_whatsapp_directo_cancelacion(nombre, fecha, hora, telefono)
        
        if resultado:
            print("‚úÖ FUNCI√ìN PANEL EXITOSA")
            print("   La funci√≥n del panel funciona correctamente")
        else:
            print("‚ùå FUNCI√ìN PANEL FALL√ì")
            print("   Hay problema en la funci√≥n del panel")
            
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_flujo_completo():
    """Test del flujo completo que deber√≠a ejecutar el panel"""
    print("\nüîç TEST 3: FLUJO COMPLETO PANEL")
    print("=" * 40)
    
    try:
        from admin.notifications import notificar_admin_cancelacion_directa
        
        # Datos de prueba
        nombre = "Test Flujo"
        fecha = "2024-12-30"
        hora = "16:00"
        telefono = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR TU N√öMERO
        
        print(f"üìù Simulando cancelaci√≥n desde panel:")
        print(f"   Nombre: {nombre}")
        print(f"   Fecha: {fecha}")
        print(f"   Hora: {hora}")
        print(f"   Tel√©fono: {telefono}")
        
        # Ejecutar funci√≥n h√≠brida (igual que el panel)
        resultado = notificar_admin_cancelacion_directa(nombre, fecha, hora, telefono)
        
        if resultado:
            print("‚úÖ FLUJO COMPLETO EXITOSO")
            print("   ‚úì Admin notificado (diferido)")
            print("   ‚úì Usuario notificado por WhatsApp (directo)")
        else:
            print("‚ö†Ô∏è FLUJO COMPLETO PARCIAL")
            print("   ‚úì Admin notificado (diferido)")
            print("   ‚ùå Error en WhatsApp directo al usuario")
            
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def verificar_logs_admin():
    """Verificar si las notificaciones al admin se est√°n registrando"""
    print("\nüîç TEST 4: LOGS DE ADMIN")
    print("=" * 40)
    
    try:
        from core.paths import ADMIN_NOTIFICATIONS_PATH
        import json
        
        print(f"üìÅ Archivo admin: {ADMIN_NOTIFICATIONS_PATH}")
        
        if os.path.exists(ADMIN_NOTIFICATIONS_PATH):
            with open(ADMIN_NOTIFICATIONS_PATH, 'r', encoding='utf-8') as f:
                notifications = json.loads(f.read())
            
            # Buscar notificaciones recientes de cancelaci√≥n
            cancelaciones = [n for n in notifications if n.get('tipo') == 'cancelacion_turno']
            
            print(f"üìä Notificaciones de cancelaci√≥n: {len(cancelaciones)}")
            
            if cancelaciones:
                print("üîç √öltimas 3 cancelaciones:")
                for i, notif in enumerate(cancelaciones[-3:], 1):
                    timestamp = notif.get('timestamp', 'N/A')[:19]
                    datos = notif.get('datos', {})
                    nombre = datos.get('nombre', 'N/A')
                    print(f"   {i}. {nombre} - {timestamp}")
                
                return True
            else:
                print("‚ö†Ô∏è No hay notificaciones de cancelaci√≥n registradas")
                return False
        else:
            print("‚ùå Archivo de notificaciones no existe")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def verificar_config_whatsapp():
    """Verificar configuraci√≥n espec√≠fica de WhatsApp"""
    print("\nüîç TEST 5: CONFIG WHATSAPP")
    print("=" * 40)
    
    try:
        from core.config import config
        
        # Verificar que config tiene WhatsApp
        has_whatsapp = config.has_whatsapp()
        print(f"üì± WhatsApp configurado: {'‚úÖ' if has_whatsapp else '‚ùå'}")
        
        if has_whatsapp:
            # Verificar variables espec√≠ficas
            token = getattr(config, 'WHATSAPP_ACCESS_TOKEN', None) or getattr(config, 'WHATSAPP_TOKEN', None)
            phone_id = getattr(config, 'WHATSAPP_PHONE_NUMBER_ID', None) or getattr(config, 'WHATSAPP_PHONE_ID', None)
            
            if token:
                print(f"üîë Token: {token[:4]}***{token[-4:]}")
            else:
                print("‚ùå Token no encontrado")
                
            if phone_id:
                print(f"üìû Phone ID: {phone_id}")
            else:
                print("‚ùå Phone ID no encontrado")
                
        return has_whatsapp
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Ejecutar diagn√≥stico completo"""
    print("üöÄ DIAGN√ìSTICO PANEL ADMIN - CANCELACI√ìN")
    print("=" * 50)
    print("Problema: El panel registra la cancelaci√≥n al admin")
    print("pero NO env√≠a WhatsApp directo al usuario")
    print("=" * 50)
    
    # Ejecutar tests
    tests = [
        ("Config WhatsApp", verificar_config_whatsapp),
        ("WhatsApp Directo", test_whatsapp_directo_simple),
        ("Funci√≥n Panel", test_funcion_panel),
        ("Flujo Completo", test_flujo_completo),
        ("Logs Admin", verificar_logs_admin)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        try:
            print(f"\nüß™ EJECUTANDO: {nombre}")
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"üí• ERROR: {e}")
            resultados.append((nombre, False))
    
    # An√°lisis de resultados
    print("\nüìä RESUMEN DIAGN√ìSTICO")
    print("=" * 30)
    
    for nombre, ok in resultados:
        status = "‚úÖ" if ok else "‚ùå"
        print(f"{status} {nombre}: {'OK' if ok else 'FALLO'}")
    
    # Diagn√≥stico espec√≠fico
    config_ok, whatsapp_ok, funcion_ok, flujo_ok, logs_ok = [r[1] for r in resultados]
    
    print(f"\nüéØ DIAGN√ìSTICO:")
    print("-" * 20)
    
    if not config_ok:
        print("‚ùå PROBLEMA: Configuraci√≥n de WhatsApp")
        print("   ‚Üí Revisar variables de entorno")
    elif not whatsapp_ok:
        print("‚ùå PROBLEMA: WhatsAppSender no funciona")
        print("   ‚Üí Error en env√≠o directo")
        print("   ‚Üí Revisar credenciales o n√∫mero de tel√©fono")
    elif not funcion_ok:
        print("‚ùå PROBLEMA: Funci√≥n del panel tiene errores")
        print("   ‚Üí Error en enviar_whatsapp_directo_cancelacion()")
    elif not flujo_ok:
        print("‚ùå PROBLEMA: Flujo h√≠brido falla")
        print("   ‚Üí Error en notificar_admin_cancelacion_directa()")
    else:
        print("ü§î PROBLEMA MISTERIOSO:")
        print("   ‚Üí Todas las funciones funcionan individualmente")
        print("   ‚Üí Pero el panel no ejecuta el env√≠o directo")
        print("   ‚Üí Posibles causas:")
        print("     ‚Ä¢ El endpoint del panel no est√° llamando la funci√≥n")
        print("     ‚Ä¢ Error silencioso en el contexto del panel")
        print("     ‚Ä¢ Problema de permisos o entorno en Railway")
    
    if logs_ok:
        print("\n‚úÖ Las notificaciones al admin S√ç funcionan")
        print("   El problema es SOLO el env√≠o directo al usuario")
    
    print(f"\nüí° SIGUIENTE PASO:")
    print("Ejecutar este script EN RAILWAY para ver qu√© falla espec√≠ficamente")

if __name__ == "__main__":
    main()
