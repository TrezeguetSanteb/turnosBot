#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico del problema de notificaciones directas por WhatsApp
cuando se cancela un turno desde el panel m√≥vil en Railway
"""

import os
import sys
from datetime import datetime

# Setup path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_1_verificar_endpoint_cancelacion():
    """Verificar que el endpoint de cancelaci√≥n est√© usando la funci√≥n correcta"""
    print("üîç TEST 1: ENDPOINT DE CANCELACI√ìN")
    print("-" * 40)
    
    try:
        # Leer el c√≥digo del panel para verificar el endpoint
        with open('src/admin/panel.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar el endpoint eliminar
        lines = content.split('\n')
        in_eliminar_function = False
        function_lines = []
        
        for i, line in enumerate(lines):
            if '@app.route(\'/eliminar/<int:turno_id>\', methods=[\'POST\'])' in line:
                in_eliminar_function = True
                function_lines.append(f"{i+1}: {line}")
                continue
            
            if in_eliminar_function:
                function_lines.append(f"{i+1}: {line}")
                
                # Salir cuando encontremos el pr√≥ximo @app.route
                if line.strip().startswith('@app.route') and 'eliminar' not in line:
                    break
                # O cuando encontremos una funci√≥n que no est√© indentada
                if line.strip() and not line.startswith(' ') and not line.startswith('\t') and 'def ' in line:
                    break
        
        print("üìã C√≥digo del endpoint eliminar:")
        for line in function_lines[-20:]:  # Mostrar √∫ltimas 20 l√≠neas relevantes
            print(f"   {line}")
        
        # Verificar elementos clave
        function_code = '\n'.join([line.split(': ', 1)[1] for line in function_lines])
        
        checks = {
            'Usa notificar_admin_cancelacion_directa': 'notificar_admin_cancelacion_directa(' in function_code,
            'Tiene fallback sistema diferido': 'notificar_cancelacion_turno(' in function_code,
            'Obtiene datos del turno': 'turno_a_eliminar' in function_code,
            'Extrae telefono': 'telefono' in function_code
        }
        
        print(f"\nüìä Verificaciones:")
        for check, result in checks.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {check}")
        
        return all(checks.values())
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_2_funcion_directa():
    """Probar la funci√≥n de env√≠o directo directamente"""
    print("\nüîç TEST 2: FUNCI√ìN ENV√çO DIRECTO")
    print("-" * 40)
    
    try:
        from admin.notifications import enviar_whatsapp_directo_cancelacion
        
        # Datos de prueba (cambiar el n√∫mero por uno real)
        nombre = "Usuario Test Railway"
        fecha = "2024-12-31"
        hora = "10:00"
        telefono = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR N√öMERO REAL
        
        print(f"üì± Probando env√≠o directo:")
        print(f"   Nombre: {nombre}")
        print(f"   Fecha: {fecha}")
        print(f"   Hora: {hora}")
        print(f"   Tel√©fono: {telefono}")
        print()
        
        print("üöÄ Ejecutando enviar_whatsapp_directo_cancelacion()...")
        resultado = enviar_whatsapp_directo_cancelacion(nombre, fecha, hora, telefono)
        
        if resultado:
            print("‚úÖ FUNCI√ìN EJECUTADA EXITOSAMENTE")
            print("   Si tienes WhatsApp configurado, deber√≠as recibir el mensaje")
        else:
            print("‚ùå FUNCI√ìN FALL√ì")
            print("   Revisar logs arriba para ver el error espec√≠fico")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error ejecutando funci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_3_whatsapp_config():
    """Verificar configuraci√≥n de WhatsApp en Railway"""
    print("\nüîç TEST 3: CONFIGURACI√ìN WHATSAPP")
    print("-" * 40)
    
    try:
        # Verificar variables de entorno
        whatsapp_vars = {
            'WHATSAPP_TOKEN': os.getenv('WHATSAPP_TOKEN'),
            'WHATSAPP_PHONE_ID': os.getenv('WHATSAPP_PHONE_ID'),
            'META_API_VERSION': os.getenv('META_API_VERSION', 'v17.0'),
            'WHATSAPP_ACCESS_TOKEN': os.getenv('WHATSAPP_ACCESS_TOKEN'),
            'WHATSAPP_PHONE_NUMBER_ID': os.getenv('WHATSAPP_PHONE_NUMBER_ID')
        }
        
        print("üîë Variables de entorno:")
        configured_count = 0
        for var, val in whatsapp_vars.items():
            if val:
                display = f"{val[:4]}***{val[-4:]}" if len(val) > 8 else "***"
                print(f"   ‚úÖ {var}: {display}")
                configured_count += 1
            else:
                print(f"   ‚ùå {var}: NO CONFIGURADA")
        
        print(f"\nüìä Variables configuradas: {configured_count}/{len(whatsapp_vars)}")
        
        # Verificar que al menos un conjunto est√© configurado
        set1_ok = whatsapp_vars['WHATSAPP_TOKEN'] and whatsapp_vars['WHATSAPP_PHONE_ID']
        set2_ok = whatsapp_vars['WHATSAPP_ACCESS_TOKEN'] and whatsapp_vars['WHATSAPP_PHONE_NUMBER_ID']
        
        if set1_ok or set2_ok:
            print("‚úÖ Al menos un conjunto de credenciales est√° configurado")
            return True
        else:
            print("‚ùå Faltan credenciales de WhatsApp")
            return False
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_4_whatsapp_sender():
    """Probar WhatsAppSender directamente"""
    print("\nüîç TEST 4: WHATSAPP SENDER DIRECTO")
    print("-" * 40)
    
    try:
        from bots.senders.whatsapp_sender import WhatsAppSender
        
        print("üì± Creando instancia WhatsAppSender...")
        sender = WhatsAppSender()
        print("‚úÖ WhatsAppSender creado exitosamente")
        
        # Test de n√∫mero
        test_number = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR N√öMERO REAL
        cleaned = sender.clean_phone_number(test_number)
        print(f"üßπ N√∫mero limpio: {test_number} ‚Üí {cleaned}")
        
        # Test de mensaje directo
        mensaje = f"üß™ TEST DIRECTO RAILWAY - {datetime.now().strftime('%H:%M')}\n\nSi recibes esto, el env√≠o directo funciona!"
        
        print(f"üì§ Enviando mensaje de prueba a {cleaned}...")
        resultado = sender.send_message(cleaned, mensaje)
        
        if resultado:
            print("‚úÖ MENSAJE ENVIADO EXITOSAMENTE")
            print("   Deber√≠as recibir el mensaje de prueba por WhatsApp")
        else:
            print("‚ùå ERROR ENVIANDO MENSAJE")
            print("   Revisar logs para ver el error espec√≠fico")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error con WhatsAppSender: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_5_simular_cancelacion_completa():
    """Simular el flujo completo de cancelaci√≥n"""
    print("\nüîç TEST 5: SIMULACI√ìN CANCELACI√ìN COMPLETA")
    print("-" * 40)
    
    try:
        from admin.notifications import notificar_admin_cancelacion_directa
        
        # Datos de prueba
        nombre = "Usuario Simulaci√≥n"
        fecha = "2024-12-31"
        hora = "11:30"
        telefono = "5491123456789"  # ‚ö†Ô∏è CAMBIAR POR N√öMERO REAL
        
        print(f"üé≠ Simulando cancelaci√≥n desde panel m√≥vil:")
        print(f"   Nombre: {nombre}")
        print(f"   Fecha: {fecha}")
        print(f"   Hora: {hora}")
        print(f"   Tel√©fono: {telefono}")
        print()
        
        print("üöÄ Ejecutando notificar_admin_cancelacion_directa()...")
        resultado = notificar_admin_cancelacion_directa(nombre, fecha, hora, telefono)
        
        if resultado:
            print("‚úÖ SIMULACI√ìN EXITOSA")
            print("   ‚úì Admin deber√≠a ser notificado (diferido)")
            print("   ‚úì Usuario deber√≠a recibir WhatsApp (inmediato)")
        else:
            print("‚ö†Ô∏è SIMULACI√ìN PARCIAL")
            print("   ‚úì Admin fue notificado")
            print("   ‚ùå WhatsApp al usuario fall√≥")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Ejecutar diagn√≥stico completo"""
    print("üöÄ DIAGN√ìSTICO NOTIFICACIONES DIRECTAS RAILWAY")
    print("=" * 60)
    print("Diagnosticando por qu√© no llegan las notificaciones")
    print("por WhatsApp cuando se cancela desde panel m√≥vil")
    print("=" * 60)
    
    # Lista de tests
    tests = [
        ("Endpoint Cancelaci√≥n", test_1_verificar_endpoint_cancelacion),
        ("Funci√≥n Env√≠o Directo", test_2_funcion_directa),
        ("Configuraci√≥n WhatsApp", test_3_whatsapp_config),
        ("WhatsApp Sender", test_4_whatsapp_sender),
        ("Simulaci√≥n Completa", test_5_simular_cancelacion_completa)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        print(f"\n{'='*20} {nombre.upper()} {'='*20}")
        try:
            resultado = test_func()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"üí• ERROR: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print(f"\n{'='*20} RESUMEN DIAGN√ìSTICO {'='*20}")
    
    pasaron = 0
    for nombre, ok in resultados:
        status = "‚úÖ" if ok else "‚ùå"
        print(f"{status} {nombre}: {'OK' if ok else 'FALLO'}")
        if ok:
            pasaron += 1
    
    total = len(resultados)
    print(f"\nüìà RESULTADO: {pasaron}/{total} tests pasaron")
    
    # Diagn√≥stico espec√≠fico
    print(f"\nüéØ DIAGN√ìSTICO:")
    print("-" * 20)
    
    if pasaron == 0:
        print("‚ùå PROBLEMA GRAVE: Ning√∫n test pas√≥")
        print("   ‚Üí Verificar configuraci√≥n b√°sica de WhatsApp")
        print("   ‚Üí Verificar variables de entorno en Railway")
    elif pasaron == 1:
        print("‚ö†Ô∏è PROBLEMA DE CONFIGURACI√ìN")
        print("   ‚Üí El endpoint est√° bien pero falla WhatsApp")
        print("   ‚Üí Revisar credenciales de WhatsApp en Railway")
    elif pasaron == 2:
        print("‚ö†Ô∏è PROBLEMA EN WHATSAPP SENDER")
        print("   ‚Üí La funci√≥n existe pero WhatsAppSender falla")
        print("   ‚Üí Revisar implementaci√≥n de WhatsAppSender")
    elif pasaron >= 3:
        print("ü§î PROBLEMA DE INTEGRACI√ìN")
        print("   ‚Üí Los componentes funcionan individualmente")
        print("   ‚Üí Problema en el flujo del panel m√≥vil")
        print("   ‚Üí Verificar que el endpoint se ejecute correctamente")
    
    if pasaron == total:
        print("üéâ TODO FUNCIONA EN TESTING")
        print("   ‚Üí El problema puede ser espec√≠fico del panel m√≥vil")
        print("   ‚Üí Verificar que se est√© llamando la funci√≥n correcta")
        print("   ‚Üí Revisar logs del panel cuando cancelas un turno")

if __name__ == "__main__":
    main()
